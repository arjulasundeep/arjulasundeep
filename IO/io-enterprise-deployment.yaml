apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise
  namespace: ${ENTERPRISE_NAMESPACE}
  labels:
    app: enterprise
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      #configure surge depending on what surge infrastructure can handle
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: enterprise
  template:
    metadata:
      labels:
        app: enterprise
    spec:
      containers:
        - name: enterprise
          image: TOMCAT.jfrog.io/docker/enterprise-docker:${VERSIONTAG}
          imagePullPolicy: Always
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: "1"
              memory: 1Gi
          ports:
          - containerPort: 8080
          volumeMounts:
          - name: enterprise
            mountPath: /opt/tomcat/SIO_HOME/conf/jdbc.properties
            subPath: jdbc.properties
          - name: enterprise
            mountPath: /opt/tomcat/SIO_HOME/conf/quartz.properties
            subPath: quartz.properties
          - name: zoneinfo
            mountPath: /etc/localtime
            subPath: UTC
            readOnly: true
          # readiness is important during a rolling update.
          livenessProbe:
            failureThreshold: 3
            successThreshold: 1
            httpGet:
              path: /SUNDEEP/app/index.html
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            initialDelaySeconds: 35
      volumes:
        - name: enterprise
          configMap:
            name: enterprise
            optional: true
        - name: zoneinfo
          hostPath:
            path: /usr/share/zoneinfo
      imagePullSecrets:
        - name: regcred
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: enterprise
  labels:
    app: enterprise
  namespace: ${ENTERPRISE_NAMESPACE}
spec:
  selector:
    app: enterprise
  type: NodePort
  ports:
    - name: enterprise
      port: 8080
