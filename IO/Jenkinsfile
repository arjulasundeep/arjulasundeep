pipeline{
    
    environment {
        imagename = "docker/io-enterprise-docker"
        dockergitrepo = 'io-enterprise-docker'
        registryCredential = 'jenkins-jfrog'
        dockerImage = ''
    }
    
    agent { 
      kubernetes {
            defaultContainer 'docker'
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    buildType: docker
spec:
  containers:
  - name: docker
    image: simeio.jfrog.io/docker/docker:20.10.10-dind
    imagePullPolicy: Always
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker-sock-volume
      mountPath: /var/run/docker.sock
  volumes:
  - name: docker-sock-volume
    hostPath:
      path: /var/run/docker.sock
  imagePullSecrets:
    - name: regcred
"""
        }
    }
    triggers {
                cron('H 15 * * *')
    }

    stages {
        stage('Build Repository Checkout') {
            steps{
                // Clean the workspace
                cleanWs()

                // Check out the build repository
                checkout([$class: 'GitSCM', branches: [[name: '*/develop']], extensions: [], userRemoteConfigs: [[credentialsId: 'bitbucket-jenkins', url: 'https://bitbucket.org/simeioio/' + dockergitrepo + '.git']]])
            }
        }
        stage('Get Build Version - Develop') {
            steps {
                //Check out the binary repo
                checkout([$class: 'GitSCM', branches: [[name: '*/development']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'binaryrepo'], [$class: 'CleanBeforeCheckout'], [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'pom.xml']]]], userRemoteConfigs: [[credentialsId: 'bitbucket-jenkins', url: 'https://bitbucket.org/simeioio/io-enterprise.git']]])
            }
        }

        stage ('Set Build Version Environment Variable') {

            steps {
                // Set the build version environment variable
                script{
	                //NEED TO UPDATE THE FOLLOWING TO GREP THE POM.XML PROPERLY TO OBTAIN THE VERSION, THEN IT SHOULD BE ACTIVATED
                    env.BLDVER = sh(script: 'cat binaryrepo/pom.xml | grep \'version\' | grep -o -E \'[0-9]+\\.[0-9]+\\.[0-9]+(\\-SNAPSHOT)?\'', returnStdout: true).trim()

                }

                // Print the determine build version
                sh 'echo Building version $BLDVER'
            }
        }

        /* stage('Download Artifacts') {
            // steps {
              //Get the Artifact from Artifactory

              //Use the following pattern for Maven-generated artifacts
                //rtDownload (
                   //serverId: 'simeio-artifactory',
                    //spec: ''' {
                            //"files": [
                                //{
                                    //"pattern": "repo/com/simeio/sio/sio/$BLDVER/sio-$BLDVER-sio.zip"
                                    //"flat": "true",
			                        //"build":"io-enterprise/LATEST"
                                //}
                            //]
                    //} '''
                //)

                //Retrieve non-Maven SNAPSHOT artifacts via curl to ensure latest SNAPSHOT build is resolved. Need the -L option to follow any redirects
                //withCredentials([usernamePassword(credentialsId: 'jenkins_jfrog', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    //sh 'curl -L -u $USERNAME:$PASSWORD -O https://simeio.jfrog.io/artifactory/libs-releases-local/com/simeio/sio/sio/$BLDVER/conf'
                    //sh 'curl -L -u $USERNAME:$PASSWORD -O https://simeio.jfrog.io/artifactory/libs-releases-local/com/simeio/sio/sio/$BLDVER/sioserver.war'
                    //sh 'curl -L -u $USERNAME:$PASSWORD -O https://simeio.jfrog.io/artifactory/libs-releases-local/com/simeio/sio/sio/$BLDVER/sioui.war'
                //}
            //}
        //}

        //stage ('download dependencies for image') {
		     //steps {
			    //withCredentials([usernamePassword(credentialsId: 'bitbucket-jenkins', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    //sh 'curl -L -u $USERNAME:$PASSWORD -O https://simeio.jfrog.io/artifactory/docker-images-local/com/simeio/sio/sio/7.2.4/sio-7.2.4-sio.zip'
				//}
				//sh 'ls sio-*.zip'
				//sh 'unzip sio-7.2.4-sio.zip'
			 //}
        //}*/
        stage('Download Artifacts') {
                     steps {
                     // Get the Artifact from Artifactory
                        rtServer (
                            id: 'ARTIFACTORY_SERVER',
                            url: 'https://simeio.jfrog.io/artifactory',
                            credentialsId: 'jenkins-jfrog'
                        )

                     // Use the following pattern for Maven-generated artifacts
                        rtDownload (
                           serverId: 'ARTIFACTORY_SERVER',
                            spec: ''' {
                                    "files": [
                                        {
                                            "pattern": "repo/com/simeio/sio/sio/$BLDVER/sio-$BLDVER-sio.zip",
                                            "sortBy": ["created"],
                                            "sortOrder": "desc",
                                            "limit": 1,
                                            "target": "binaryrepo/",
                                            "flat": "true"
                                        }
                                    ]
                            } '''
                        )

                        rtDownload (
                           serverId: 'ARTIFACTORY_SERVER',
                            spec: ''' {
                                    "files": [
                                        {
                                            "pattern": "repo/com/simeio/sio/sioserver/$BLDVER/sioserver-$BLDVER.war",
                                            "sortBy": ["created"],
                                            "sortOrder": "desc",
                                            "limit": 1,
                                            "target": "binaryrepo/",
                                            "flat": "true"
                                        }
                                    ]
                            } '''
                        )
                        rtDownload (
                           serverId: 'ARTIFACTORY_SERVER',
                            spec: ''' {
                                    "files": [
                                        {
                                            "pattern": "repo/com/simeio/sio/sioui/$BLDVER/sioui-$BLDVER.war",
                                            "sortBy": ["created"],
                                            "sortOrder": "desc",
                                            "limit": 1,
                                            "target": "binaryrepo/",
                                            "flat": "true"
                                        }
                                    ]
                            } '''
                        )
                     }
                }

                stage ("Building Docker Image") {
                    steps {

                        script {
                            sh ("cp binaryrepo/sioserver-*.war sioserver.war")
                            sh ("cp binaryrepo/sioui-*.war sioui.war")
                            sh ("cp binaryrepo/sio-$BLDVER-sio.zip .")
                            sh ("unzip sio-$BLDVER-sio.zip")
                            sh ("rm -rf conf/jdbc.properties")
                            sh ("rm -rf conf/quartz.properties")
                            sh ("docker build --network=host -t " + imagename + " .")
                            dockerImage = docker.build imagename
                        }
                    }
                }

                stage ("Push Docker Image to Registry") {
                    steps {
                        script {
                            docker.withRegistry('http://simeio.jfrog.io/artifactory', registryCredential) {
                            dockerImage.push('$BLDVER')
                            dockerImage.push('latest')
                            }
                        }
                    }
                }
            }
        }